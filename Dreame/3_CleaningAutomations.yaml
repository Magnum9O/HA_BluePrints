blueprint:
  name: "[DEV] Dreame Vacuum - Automazione Pulizie Avanzata"
  description: |
    <details>
    <summary>📅 <strong>VISUALIZZA RIEPILOGO SCHEDULAZIONI</strong> (clicca per espandere)</summary>
    
    Una volta creata l'automazione, **copia questo codice** e incollalo in:
    **Strumenti Sviluppatore → Template**
    
    ```
    ## 📅 IL TUO PIANO PULIZIE DREAME
    
    ### 🗓️ SLOT PRINCIPALE
    {% for day in ['lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato', 'domenica'] %}
    {% if day in states.input_select.main_weekdays.state.split(',') %}
    **{{ day.title() }}:**
    {% if states('input_boolean.main_morning_on') == 'on' %}
    - 🌅 {{ states('input_datetime.main_morning_time') }} → {{ states('input_select.main_morning_preset') }}
      Stanze: {{ states('input_text.main_morning_rooms') or 'Tutta casa' }}
    {% endif %}
    {% if states('input_boolean.main_evening_on') == 'on' %}
    - 🌙 {{ states('input_datetime.main_evening_time') }} → Logica: {{ states('input_select.main_evening_conditional') }}
    {% endif %}
    {% endif %}
    {% endfor %}
    
    ### 🎯 SCHEDULAZIONI AGGIUNTIVE  
    {% for i in range(1, 5) %}
    {% if states('input_boolean.schedule' + i|string + '_on') == 'on' %}
    **Schedulazione {{ i }}:**
    [Giorni configurati: {{ states('input_select.schedule' + i|string + '_weekdays').split(',') | join(', ') }}]
    {% endif %}
    {% endfor %}
    
    ### ⚠️ ATTENZIONE
    Verifica che non ci siano sovrapposizioni di giorni tra schedulazioni diverse!
    ```
    
    **Ti mostrerà esattamente quando e dove è programmato il robot.**
    Se vedi conflitti, modifica l'automazione e ricontrolla.
    
    </details>
    
    🤖 **Automazione avanzata per robot Dreame**
    
    ✨ **Funzionalità avanzate:**
    - 🔄 Logica adattiva (sera si adatta al mattino)
    - 🔗 Pulizie sequenziali con attesa automatica
    - 🤖 Controllo stato robot prima dell'avvio
    - 🔔 Notifiche Alexa opzionali
    - 🐛 Debug completo per troubleshooting
    
    🎯 **Struttura:** 1 Slot Principale + 4 Schedulazioni Aggiuntive (opzionali)
    Ogni slot ha mattina e sera configurabili separatamente.
  
  domain: automation
  input:
    # ========================================
    # === ENTITÀ PRINCIPALI ===
    # ========================================
    vacuum_entity:
      name: 🤖 Entità Vacuum
      description: Il tuo robot Dreame (es. vacuum.ambrogio)
      selector:
        entity:
          domain: vacuum
          
    robot_status_sensor:
      name: 📊 Sensore Stato Robot (Opzionale)
      description: |
        Sensore di stato dettagliato per controlli avanzati.
        
        🔍 **Come trovarlo:** `sensor.NOME_ROBOT_status`
        Es: `sensor.ambrogio_status` per robot `vacuum.ambrogio`
        
        ⚠️ Lascia vuoto per disabilitare controlli stato
      default: ""
      selector:
        entity:
          domain: sensor
          
    valid_robot_states:
      name: ✅ Stati Robot Validi
      description: Stati in cui il robot può avviare una pulizia
      default: ["idle", "sleeping", "charging", "docked"]
      selector:
        select:
          options:
            - "idle"
            - "sleeping" 
            - "charging"
            - "docked"
            - "paused"
            - "returning"
          multiple: true
          
    # ========================================
    # === CONTROLLO PRESENZA ===
    # ========================================
    presence_entity:
      name: 🏠 Entità Presenza (Opzionale)
      description: |
        Entità che indica se sei in casa o fuori.
        
        💡 **Esempi comuni:**
        - `person.nome` (entità Persona)
        - `binary_sensor.occupancy` (sensore PIR)
        - `counter.people_home` (contatore persone)
        
        ⚠️ Lascia vuoto per disabilitare controllo presenza
      default: ""
      selector:
        entity: {}
        
    presence_value:
      name: 🚪 Valore "Fuori Casa"
      description: |
        Valore che indica "nessuno in casa".
        
        📝 **Esempi:** `not_home`, `away`, `off`, `0`
        
        💡 **Come scoprirlo:** Strumenti Sviluppatore → Stati → cerca la tua entità quando sei fuori
      default: "not_home"
      
    # ========================================
    # === FLAG PULIZIA GLOBALE ===
    # ========================================
    flag_cleaned_today:
      name: 🏃 Flag "Pulito Oggi"
      description: |
        Input boolean GLOBALE per tracciare pulizie giornaliere.
        
        🆕 **DEVI CREARLO:**
        Impostazioni → Dispositivi e Servizi → Helper → Crea Helper → Interruttore
        Nome: "Robot Pulito Oggi"
        
        ℹ️ **Funzione:** Evita doppie pulizie e abilita logica adattiva sera
      selector:
        entity:
          domain: input_boolean
          
    # ========================================
    # === NOTIFICHE E DEBUG ===
    # ========================================
    notification_targets:
      name: 🔔 Notifiche Alexa (Opzionale)
      description: |
        Media player per annunci vocali automatici.
        
        📱 **Sintassi:** `media_player.echo_soggiorno` o multipli separati da virgola
        
        ⚠️ Lascia vuoto per disabilitare
      default: ""

    debug_mode:
      name: 🐛 Modalità Debug
      description: |
        Log dettagliati per troubleshooting.
        
        📝 **Visualizza log in:** Impostazioni → Sistema → Log
      default: false
      selector:
        boolean: {}
        
    # ========================================
    # === SLOT PRINCIPALE ===
    # ========================================
    main_on:
      name: 🎯 SLOT PRINCIPALE - Abilita
      description: Slot sempre disponibile per pulizie principali (es. giorni lavorativi)
      default: true
      selector:
        boolean: {}
        
    # === MATTINA SLOT PRINCIPALE ===
    main_morning_on:
      name: 🌅 SLOT PRINCIPALE - Mattina - Abilita
      description: Attiva pulizia mattutina per slot principale
      default: true
      selector:
        boolean: {}
        
    main_morning_time:
      name: ⏰ SLOT PRINCIPALE - Mattina - Orario
      default: "08:00:00"
      selector:
        time: {}
        
    main_morning_weekdays:
      name: 📅 SLOT PRINCIPALE - Mattina - Giorni
      description: Giorni per pulizia mattutina
      default: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    main_morning_preset:
      name: 🎯 SLOT PRINCIPALE - Mattina - Modalità
      description: |
        📋 **Modalità disponibili:**
        - **aspira:** Solo aspirazione
        - **lava:** Solo lavaggio
        - **pulisci:** Aspirazione + lavaggio
        - **cleangenius:** Modalità intelligente
        - **cleangenius_deep:** Pulizia approfondita
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    main_morning_rooms:
      name: 🏠 SLOT PRINCIPALE - Mattina - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
        
        📝 **Esempi:** `2,3,4` oppure `cucina,soggiorno`
      default: ""
      
    # === SERA SLOT PRINCIPALE ===
    main_evening_on:
      name: 🌙 SLOT PRINCIPALE - Sera - Abilita
      default: true
      selector:
        boolean: {}
        
    main_evening_time:
      name: ⏰ SLOT PRINCIPALE - Sera - Orario
      default: "18:00:00"
      selector:
        time: {}
        
    main_evening_weekdays:
      name: 📅 SLOT PRINCIPALE - Sera - Giorni
      default: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    main_evening_conditional:
      name: 🧠 SLOT PRINCIPALE - Sera - Logica Adattiva
      description: |
        **Come comportarsi in base alla pulizia mattutina:**
        
        - **Esegui sempre:** Ignora se già pulito (modalità classica)
        - **Salta se già pulito:** Non fa nulla se flag acceso
        - **Solo se non pulito:** Pulizia di recupero
        - **Adatta modalità:** Usa modalità alternativa se già pulito
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito"
              value: "skip_if_cleaned"
            - label: "Solo se non pulito"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    main_evening_preset:
      name: 🎯 SLOT PRINCIPALE - Sera - Modalità Normale
      description: |
        Modalità per pulizia serale normale.
        
        ⚠️ **Ignorata se sopra hai scelto "Adatta modalità"**
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    main_evening_rooms:
      name: 🏠 SLOT PRINCIPALE - Sera - Stanze Normali
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    main_evening_fallback_preset:
      name: 🔄 SLOT PRINCIPALE - Sera - Modalità Alternativa
      description: |
        **Modalità quando già pulito** (solo se sopra = "Adatta modalità")
        
        💡 Es: Se mattina CleanGenius, sera solo Aspirazione
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    main_evening_fallback_rooms:
      name: 🔄 SLOT PRINCIPALE - Sera - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
        
        💡 Es: Se mattina tutta casa, sera solo cucina
      default: ""
      
    # === SEQUENZIALI SLOT PRINCIPALE ===
    main_morning_sequential:
      name: 🔗 SLOT PRINCIPALE - Mattina - Pulizia Sequenziale
      description: |
        **Pulizie consecutive con attesa automatica.**
        
        💡 Es: Step 1 aspira soggiorno → attende → Step 2 pulisce cucina
      default: false
      selector:
        boolean: {}
        
    main_morning_step2_preset:
      name: 🎯 SLOT PRINCIPALE - Mattina - Step 2 - Modalità
      description: Eseguito dopo completamento Step 1 (se sequenziale attivo)
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    main_morning_step2_rooms:
      name: 🏠 SLOT PRINCIPALE - Mattina - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    main_morning_step3_preset:
      name: 🎯 SLOT PRINCIPALE - Mattina - Step 3 - Modalità
      description: Eseguito dopo completamento Step 2 (se configurato)
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    main_morning_step3_rooms:
      name: 🏠 SLOT PRINCIPALE - Mattina - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    main_morning_max_wait:
      name: ⏱️ SLOT PRINCIPALE - Mattina - Timeout Attesa (minuti)
      description: |
        Tempo massimo attesa tra step sequenziali.
        
        💡 Consigliato: 60-90 min per pulizie complete, 30-45 per leggere
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"
          
    main_evening_sequential:
      name: 🔗 SLOT PRINCIPALE - Sera - Pulizia Sequenziale
      description: Pulizie consecutive con attesa automatica
      default: false
      selector:
        boolean: {}
        
    main_evening_step2_preset:
      name: 🎯 SLOT PRINCIPALE - Sera - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    main_evening_step2_rooms:
      name: 🏠 SLOT PRINCIPALE - Sera - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    main_evening_step3_preset:
      name: 🎯 SLOT PRINCIPALE - Sera - Step 3 - Modalità
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    main_evening_step3_rooms:
      name: 🏠 SLOT PRINCIPALE - Sera - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    main_evening_max_wait:
      name: ⏱️ SLOT PRINCIPALE - Sera - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"
          
    # ========================================
    # === PRIMA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule1_on:
      name: 🎯 Prima Schedulazione Aggiuntiva - Abilita
      description: |
        Schedulazione opzionale per giorni/orari specifici.
        
        💡 **Utile per:** Weekend, pulizie approfondite, orari particolari
      default: false
      selector:
        boolean: {}
        
    # === MATTINA PRIMA SCHEDULAZIONE ===
    schedule1_morning_on:
      name: 🌅 Prima Schedulazione - Mattina - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule1_morning_time:
      name: ⏰ Prima Schedulazione - Mattina - Orario
      default: "10:00:00"
      selector:
        time: {}
        
    schedule1_morning_weekdays:
      name: 📅 Prima Schedulazione - Mattina - Giorni
      description: |
        ⚠️ **ATTENZIONE:** Scegli giorni diversi dallo Slot Principale per evitare conflitti
      default: ["sabato"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule1_morning_preset:
      name: 🎯 Prima Schedulazione - Mattina - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule1_morning_rooms:
      name: 🏠 Prima Schedulazione - Mattina - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    # === SERA PRIMA SCHEDULAZIONE ===
    schedule1_evening_on:
      name: 🌙 Prima Schedulazione - Sera - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule1_evening_time:
      name: ⏰ Prima Schedulazione - Sera - Orario
      default: "20:00:00"
      selector:
        time: {}
        
    schedule1_evening_weekdays:
      name: 📅 Prima Schedulazione - Sera - Giorni
      default: ["sabato"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule1_evening_conditional:
      name: 🧠 Prima Schedulazione - Sera - Logica Adattiva
      description: Come comportarsi in base alla mattina di QUESTA schedulazione
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito"
              value: "skip_if_cleaned"
            - label: "Solo se non pulito"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule1_evening_preset:
      name: 🎯 Prima Schedulazione - Sera - Modalità Normale
      description: Modalità normale (ignorata se sopra = "Adatta modalità")
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule1_evening_rooms:
      name: 🏠 Prima Schedulazione - Sera - Stanze Normali
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    schedule1_evening_fallback_preset:
      name: 🔄 Prima Schedulazione - Sera - Modalità Alternativa
      description: Usata solo se sopra = "Adatta modalità se già pulito"
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule1_evening_fallback_rooms:
      name: 🔄 Prima Schedulazione - Sera - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""

    # ========================================
    # === SECONDA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule2_on:
      name: 🎯 Seconda Schedulazione Aggiuntiva - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule2_morning_on:
      name: 🌅 Seconda Schedulazione - Mattina - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule2_morning_time:
      name: ⏰ Seconda Schedulazione - Mattina - Orario
      default: "11:00:00"
      selector:
        time: {}
        
    schedule2_morning_weekdays:
      name: 📅 Seconda Schedulazione - Mattina - Giorni
      default: ["domenica"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule2_morning_preset:
      name: 🎯 Seconda Schedulazione - Mattina - Modalità
      default: "cleangenius_deep"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule2_morning_rooms:
      name: 🏠 Seconda Schedulazione - Mattina - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    schedule2_evening_on:
      name: 🌙 Seconda Schedulazione - Sera - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule2_evening_time:
      name: ⏰ Seconda Schedulazione - Sera - Orario
      default: "21:00:00"
      selector:
        time: {}
        
    schedule2_evening_weekdays:
      name: 📅 Seconda Schedulazione - Sera - Giorni
      default: ["domenica"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule2_evening_conditional:
      name: 🧠 Seconda Schedulazione - Sera - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito"
              value: "skip_if_cleaned"
            - label: "Solo se non pulito"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule2_evening_preset:
      name: 🎯 Seconda Schedulazione - Sera - Modalità Normale
      default: "lava"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule2_evening_rooms:
      name: 🏠 Seconda Schedulazione - Sera - Stanze Normali
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    schedule2_evening_fallback_preset:
      name: 🔄 Seconda Schedulazione - Sera - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule2_evening_fallback_rooms:
      name: 🔄 Seconda Schedulazione - Sera - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""

    # ========================================
    # === TERZA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule3_on:
      name: 🎯 Terza Schedulazione Aggiuntiva - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule3_morning_on:
      name: 🌅 Terza Schedulazione - Mattina - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule3_morning_time:
      name: ⏰ Terza Schedulazione - Mattina - Orario
      default: "09:30:00"
      selector:
        time: {}
        
    schedule3_morning_weekdays:
      name: 📅 Terza Schedulazione - Mattina - Giorni
      default: ["sabato"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule3_morning_preset:
      name: 🎯 Terza Schedulazione - Mattina - Modalità
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule3_morning_rooms:
      name: 🏠 Terza Schedulazione - Mattina - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    schedule3_evening_on:
      name: 🌙 Terza Schedulazione - Sera - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule3_evening_time:
      name: ⏰ Terza Schedulazione - Sera - Orario
      default: "19:30:00"
      selector:
        time: {}
        
    schedule3_evening_weekdays:
      name: 📅 Terza Schedulazione - Sera - Giorni
      default: ["sabato"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule3_evening_conditional:
      name: 🧠 Terza Schedulazione - Sera - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito"
              value: "skip_if_cleaned"
            - label: "Solo se non pulito"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule3_evening_preset:
      name: 🎯 Terza Schedulazione - Sera - Modalità Normale
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule3_evening_rooms:
      name: 🏠 Terza Schedulazione - Sera - Stanze Normali
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    schedule3_evening_fallback_preset:
      name: 🔄 Terza Schedulazione - Sera - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule3_evening_fallback_rooms:
      name: 🔄 Terza Schedulazione - Sera - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""

    # ========================================
    # === QUARTA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule4_on:
      name: 🎯 Quarta Schedulazione Aggiuntiva - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule4_morning_on:
      name: 🌅 Quarta Schedulazione - Mattina - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule4_morning_time:
      name: ⏰ Quarta Schedulazione - Mattina - Orario
      default: "07:30:00"
      selector:
        time: {}
        
    schedule4_morning_weekdays:
      name: 📅 Quarta Schedulazione - Mattina - Giorni
      default: ["domenica"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule4_morning_preset:
      name: 🎯 Quarta Schedulazione - Mattina - Modalità
      default: "lava"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule4_morning_rooms:
      name: 🏠 Quarta Schedulazione - Mattina - Stanze
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    schedule4_evening_on:
      name: 🌙 Quarta Schedulazione - Sera - Abilita
      default: false
      selector:
        boolean: {}
        
    schedule4_evening_time:
      name: ⏰ Quarta Schedulazione - Sera - Orario
      default: "22:00:00"
      selector:
        time: {}
        
    schedule4_evening_weekdays:
      name: 📅 Quarta Schedulazione - Sera - Giorni
      default: ["domenica"]
      selector:
        select:
          options: ["lunedì", "martedì", "mercoledì", "giovedì", "venerdì", "sabato", "domenica"]
          multiple: true
      
    schedule4_evening_conditional:
      name: 🧠 Quarta Schedulazione - Sera - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito"
              value: "skip_if_cleaned"
            - label: "Solo se non pulito"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule4_evening_preset:
      name: 🎯 Quarta Schedulazione - Sera - Modalità Normale
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule4_evening_rooms:
      name: 🏠 Quarta Schedulazione - Sera - Stanze Normali
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""
      
    schedule4_evening_fallback_preset:
      name: 🔄 Quarta Schedulazione - Sera - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule4_evening_fallback_rooms:
      name: 🔄 Quarta Schedulazione - Sera - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi separati da virgola. Vuoto = tutta casa.**
      default: ""

# =========================================
# === TRIGGERS E AZIONI ===
# =========================================
trigger:
  # SLOT PRINCIPALE
  - platform: time
    at: !input main_morning_time
    id: main_morning
  - platform: time  
    at: !input main_evening_time
    id: main_evening
  
  # PRIMA SCHEDULAZIONE  
  - platform: time
    at: !input schedule1_morning_time
    id: schedule1_morning
  - platform: time
    at: !input schedule1_evening_time
    id: schedule1_evening
    
  # SECONDA SCHEDULAZIONE
  - platform: time
    at: !input schedule2_morning_time
    id: schedule2_morning
  - platform: time
    at: !input schedule2_evening_time
    id: schedule2_evening
    
  # TERZA SCHEDULAZIONE
  - platform: time
    at: !input schedule3_morning_time
    id: schedule3_morning
  - platform: time
    at: !input schedule3_evening_time
    id: schedule3_evening
    
  # QUARTA SCHEDULAZIONE
  - platform: time
    at: !input schedule4_morning_time
    id: schedule4_morning
  - platform: time
    at: !input schedule4_evening_time
    id: schedule4_evening
    
  # Reset flag giornaliero
  - platform: time
    at: "23:59:00"
    id: reset_flag

variables:
  # Entità principali
  vacuum_ent: !input vacuum_entity
  robot_status: !input robot_status_sensor
  valid_states: !input valid_robot_states
  presence_ent: !input presence_entity
  pres_val: !input presence_value
  flag_cleaned: !input flag_cleaned_today
  notification_targets: !input notification_targets
  debug_enabled: !input debug_mode

action:
  # === RESET FLAG GIORNALIERO ===
  - if:
      - condition: template
        value_template: "{{ trigger.id == 'reset_flag' }}"
    then:
      - if:
          - condition: template
            value_template: "{{ debug_enabled }}"
        then:
          - service: system_log.write
            data:
              message: "[DREAME BLUEPRINT] 🌙 Reset flag pulizia giornaliero"
              level: info
      - service: input_boolean.turn_off
        target:
          entity_id: "{{ flag_cleaned }}"
      - stop: "Reset flag completato"

  # === CONTROLLO COLLISIONI (DEBUG) ===
  - if:
      - condition: template
        value_template: "{{ debug_enabled and trigger.id != 'reset_flag' }}"
    then:
      - service: system_log.write
        data:
          message: |
            [DREAME BLUEPRINT] 🔍 Trigger attivato: {{ trigger.id }}
            - Robot Status: {{ states(robot_status) if robot_status != '' else 'N/A' }}
            - Presenza: {{ states(presence_ent) if presence_ent != '' else 'N/A' }}
            - Flag Cleaned: {{ states(flag_cleaned) }}
          level: info

  # === LOGICA PRINCIPALE ===
  - choose:
      # ===== SLOT PRINCIPALE MATTINA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'main_morning' }}"
          - condition: template
            value_template: "{{ main_on and main_morning_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {% set day_map = {
                'monday': 'lunedì', 'tuesday': 'martedì', 'wednesday': 'mercoledì',
                'thursday': 'giovedì', 'friday': 'venerdì', 'saturday': 'sabato', 'sunday': 'domenica'
              } %}
              {{ day_map[current_weekday] in main_morning_weekdays }}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              slot_name: "SLOT PRINCIPALE MATTINA"
              slot_preset: !input main_morning_preset
              slot_rooms: !input main_morning_rooms
              slot_sequential: !input main_morning_sequential
              slot_step2_preset: !input main_morning_step2_preset
              slot_step2_rooms: !input main_morning_step2_rooms
              slot_step3_preset: !input main_morning_step3_preset
              slot_step3_rooms: !input main_morning_step3_rooms
              slot_max_wait: !input main_morning_max_wait
          - sequence: &execute_cleaning_sequence
              # === LOG DEBUG ===
              - if:
                  - condition: template
                    value_template: "{{ debug_enabled }}"
                then:
                  - service: system_log.write
                    data:
                      message: >
                        [DREAME BLUEPRINT] 🚀 Avvio pulizia {{ slot_name }}
                        - Preset: {{ slot_preset }}
                        - Stanze: {{ slot_rooms }}
                        - Sequenziale: {{ slot_sequential }}
                      level: info
              
              # === NOTIFICA INIZIO ===
              - if:
                  - condition: template
                    value_template: "{{ notification_targets != '' }}"
                then:
                  - repeat:
                      count: >
                        {{ notification_targets.split(',') | length }}
                      sequence:
                        - service: tts.speak
                          target:
                            entity_id: >
                              {{ notification_targets.split(',')[repeat.index - 1].strip() }}
                          data:
                            message: >
                              Avvio pulizia {{ slot_name.lower().replace('slot principale ', '') }}
                              {% if slot_rooms != '' %}
                              stanze: {{ slot_rooms }}
                              {% endif %}
              
              # === PULIZIA STEP 1 ===
              - variables:
                  preset_now: "{{ slot_preset }}"
                  rooms_now: "{{ slot_rooms }}"
              - sequence: &run_cleaning_step
                  - variables:
                      rooms_list: >
                        {% if rooms_now == '' %}
                          []
                        {% else %}
                          {% set room_ids = [] %}
                          {% for room in rooms_now.split(',') %}
                            {% set room = room.strip() %}
                            {% if room.isdigit() %}
                              {% set room_ids = room_ids + [room|int] %}
                            {% else %}
                              {% for entity in states.sensor %}
                                {% if entity.entity_id.startswith(vacuum_ent ~ '_room_') and entity.attributes.get('friendly_name', '').lower() == room.lower() %}
                                  {% set room_ids = room_ids + [entity.state|int] %}
                                {% endif %}
                              {% endfor %}
                            {% endif %}
                          {% endfor %}
                          {{ room_ids }}
                        {% endif %}
                        
                  - choose:
                      # CleanGenius modalità
                      - conditions: 
                          - condition: template
                            value_template: "{{ preset_now in ['cleangenius', 'cleangenius_deep'] }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ vacuum_ent }}_cleangenius"  
                            data:
                              option: >
                                {% if preset_now == 'cleangenius_deep' %}
                                  cleaning_route
                                {% else %}
                                  standard_cleaning
                                {% endif %}
                          - if:
                              - condition: template
                                value_template: "{{ rooms_list | length > 0 }}"
                            then:
                              - service: vacuum.send_command
                                target:
                                  entity_id: "{{ vacuum_ent }}"
                                data:
                                  command: app_segment_clean
                                  params: "{{ rooms_list }}"
                            else:
                              - service: vacuum.start
                                target:
                                  entity_id: "{{ vacuum_ent }}"
                                  
                      # Modalità standard
                      - conditions: 
                          - condition: template
                            value_template: "{{ preset_now in ['aspira', 'lava', 'pulisci'] }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ vacuum_ent }}_cleaning_mode"
                            data:
                              option: >
                                {% if preset_now == 'aspira' %}
                                  vacuuming
                                {% elif preset_now == 'lava' %}
                                  mopping
                                {% else %}
                                  vacuuming_and_mopping  
                                {% endif %}
                          - if:
                              - condition: template
                                value_template: "{{ rooms_list | length > 0 }}"
                            then:
                              - service: vacuum.send_command
                                target:
                                  entity_id: "{{ vacuum_ent }}"
                                data:
                                  command: app_segment_clean
                                  params: "{{ rooms_list }}"
                            else:
                              - service: vacuum.start
                                target:
                                  entity_id: "{{ vacuum_ent }}"
              
              # === ATTESA COMPLETAMENTO PER STEP SUCCESSIVI ===
              - if:
                  - condition: template
                    value_template: "{{ slot_sequential and (slot_step2_preset != '' or slot_step3_preset != '') }}"
                then:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏳ Attesa completamento Step 1..."
                          level: info
                  
                  - wait_for_trigger:
                      - platform: state
                        entity_id: >
                          {% if robot_status != '' %}
                            {{ robot_status }}
                          {% else %}
                            {{ vacuum_ent }}
                          {% endif %}
                        to: ["idle", "sleeping", "charging", "docked"]
                        for: "00:00:10"
                    timeout: "{{ (slot_max_wait * 60) | int }}"
                    
                  - if:
                      - condition: template
                        value_template: "{{ wait.completed }}"
                      - condition: template
                        value_template: "{{ slot_step2_preset != '' }}"
                    then:
                      # === PULIZIA STEP 2 ===
                      - if:
                          - condition: template
                            value_template: "{{ debug_enabled }}"
                        then:
                          - service: system_log.write
                            data:
                              message: "[DREAME BLUEPRINT] 🚀 Avvio Step 2"
                              level: info
                      
                      - variables:
                          preset_now: "{{ slot_step2_preset }}"
                          rooms_now: "{{ slot_step2_rooms }}"
                      - sequence: *run_cleaning_step
                      
                      # === ATTESA PER STEP 3 ===
                      - if:
                          - condition: template
                            value_template: "{{ slot_step3_preset != '' }}"
                        then:
                          - wait_for_trigger:
                              - platform: state
                                entity_id: >
                                  {% if robot_status != '' %}
                                    {{ robot_status }}
                                  {% else %}
                                    {{ vacuum_ent }}
                                  {% endif %}
                                to: ["idle", "sleeping", "charging", "docked"]
                                for: "00:00:10"
                            timeout: "{{ (slot_max_wait * 60) | int }}"
                            
                          - if:
                              - condition: template
                                value_template: "{{ wait.completed }}"
                            then:
                              # === PULIZIA STEP 3 ===
                              - if:
                                  - condition: template
                                    value_template: "{{ debug_enabled }}"
                                then:
                                  - service: system_log.write
                                    data:
                                      message: "[DREAME BLUEPRINT] 🚀 Avvio Step 3"
                                      level: info
                              
                              - variables:
                                  preset_now: "{{ slot_step3_preset }}"
                                  rooms_now: "{{ slot_step3_rooms }}"
                              - sequence: *run_cleaning_step
              
              # === IMPOSTA FLAG PULIZIA ===
              - service: input_boolean.turn_on
                target:
                  entity_id: "{{ flag_cleaned }}"
                  
              # === NOTIFICA COMPLETAMENTO ===
              - if:
                  - condition: template
                    value_template: "{{ notification_targets != '' }}"
                then:
                  - repeat:
                      count: >
                        {{ notification_targets.split(',') | length }}
                      sequence:
                        - service: tts.speak
                          target:
                            entity_id: >
                              {{ notification_targets.split(',')[repeat.index - 1].strip() }}
                          data:
                            message: "Pulizia {{ slot_name.lower().replace('slot principale ', '') }} avviata con successo"

      # ===== SLOT PRINCIPALE SERA (CON LOGICA ADATTIVA) =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'main_evening' }}"
          - condition: template
            value_template: "{{ main_on and main_evening_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {% set day_map = {
                'monday': 'lunedì', 'tuesday': 'martedì', 'wednesday': 'mercoledì',
                'thursday': 'giovedì', 'friday': 'venerdì', 'saturday': 'sabato', 'sunday': 'domenica'
              } %}
              {{ day_map[current_weekday] in main_evening_weekdays }}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          # === LOGICA ADATTIVA ===
          - choose:
              # Skip se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ main_evening_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏭️ Slot Principale SERA saltato - già pulito oggi"
                          level: info
                  - stop: "Pulizia già effettuata oggi"
              
              # Esegui solo se non pulito
              - conditions:
                  - condition: template
                    value_template: "{{ main_evening_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "SLOT PRINCIPALE SERA (Recupero)"
                      slot_preset: !input main_evening_preset
                      slot_rooms: !input main_evening_rooms
                      slot_sequential: !input main_evening_sequential
                      slot_step2_preset: !input main_evening_step2_preset
                      slot_step2_rooms: !input main_evening_step2_rooms
                      slot_step3_preset: !input main_evening_step3_preset
                      slot_step3_rooms: !input main_evening_step3_rooms
                      slot_max_wait: !input main_evening_max_wait
                  - sequence: *execute_cleaning_sequence
              
              # Adatta modalità se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ main_evening_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "SLOT PRINCIPALE SERA (Modalità Leggera)"
                      slot_preset: !input main_evening_fallback_preset
                      slot_rooms: !input main_evening_fallback_rooms
                      slot_sequential: !input main_evening_sequential
                      slot_step2_preset: !input main_evening_step2_preset
                      slot_step2_rooms: !input main_evening_step2_rooms
                      slot_step3_preset: !input main_evening_step3_preset
                      slot_step3_rooms: !input main_evening_step3_rooms
                      slot_max_wait: !input main_evening_max_wait
                  - sequence: *execute_cleaning_sequence
              
              # Esegui sempre (modalità normale)
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "SLOT PRINCIPALE SERA"
                      slot_preset: !input main_evening_preset
                      slot_rooms: !input main_evening_rooms
                      slot_sequential: !input main_evening_sequential
                      slot_step2_preset: !input main_evening_step2_preset
                      slot_step2_rooms: !input main_evening_step2_rooms
                      slot_step3_preset: !input main_evening_step3_preset
                      slot_step3_rooms: !input main_evening_step3_rooms
                      slot_max_wait: !input main_evening_max_wait
                  - sequence: *execute_cleaning_sequence

      # ===== PRIMA SCHEDULAZIONE MATTINA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule1_morning' }}"
          - condition: template
            value_template: "{{ schedule1_on and schedule1_morning_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {% set day_map = {
                'monday': 'lunedì', 'tuesday': 'martedì', 'wednesday': 'mercoledì',
                'thursday': 'giovedì', 'friday': 'venerdì', 'saturday': 'sabato', 'sunday': 'domenica'
              } %}
              {{ day_map[current_weekday] in schedule1_morning_weekdays }}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              slot_name: "PRIMA SCHEDULAZIONE MATTINA"
              slot_preset: !input schedule1_morning_preset
              slot_rooms: !input schedule1_morning_rooms
              slot_sequential: false
              slot_step2_preset: ""
              slot_step2_rooms: ""
              slot_step3_preset: ""
              slot_step3_rooms: ""
              slot_max_wait: 60
          - sequence: *execute_cleaning_sequence

      # ===== PRIMA SCHEDULAZIONE SERA (CON LOGICA ADATTIVA) =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule1_evening' }}"
          - condition: template
            value_template: "{{ schedule1_on and schedule1_evening_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {% set day_map = {
                'monday': 'lunedì', 'tuesday': 'martedì', 'wednesday': 'mercoledì',
                'thursday': 'giovedì', 'friday': 'venerdì', 'saturday': 'sabato', 'sunday': 'domenica'
              } %}
              {{ day_map[current_weekday] in schedule1_evening_weekdays }}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          # === LOGICA ADATTIVA PRIMA SCHEDULAZIONE ===
          - choose:
              # Skip se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ schedule1_evening_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏭️ Prima Schedulazione SERA saltata - già pulito oggi"
                          level: info
                  - stop: "Pulizia già effettuata oggi"
              
              # Esegui solo se non pulito
              - conditions:
                  - condition: template
                    value_template: "{{ schedule1_evening_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "PRIMA SCHEDULAZIONE SERA (Recupero)"
                      slot_preset: !input schedule1_evening_preset
                      slot_rooms: !input schedule1_evening_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence
              
              # Adatta modalità se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ schedule1_evening_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "PRIMA SCHEDULAZIONE SERA (Modalità Leggera)"
                      slot_preset: !input schedule1_evening_fallback_preset
                      slot_rooms: !input schedule1_evening_fallback_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence
              
              # Esegui sempre
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "PRIMA SCHEDULAZIONE SERA"
                      slot_preset: !input schedule1_evening_preset
                      slot_rooms: !input schedule1_evening_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence

      # ===== SECONDA SCHEDULAZIONE MATTINA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule2_morning' }}"
          - condition: template
            value_template: "{{ schedule2_on and schedule2_morning_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {% set day_map = {
                'monday': 'lunedì', 'tuesday': 'martedì', 'wednesday': 'mercoledì',
                'thursday': 'giovedì', 'friday': 'venerdì', 'saturday': 'sabato', 'sunday': 'domenica'
              } %}
              {{ day_map[current_weekday] in schedule2_morning_weekdays }}
        sequence:
          - variables:
              slot_name: "SECONDA SCHEDULAZIONE MATTINA"
              slot_preset: !input schedule2_morning_preset
              slot_rooms: !input schedule2_morning_rooms
              slot_sequential: false
              slot_step2_preset: ""
              slot_step2_rooms: ""
              slot_step3_preset: ""
              slot_step3_rooms: ""
              slot_max_wait: 60
          - sequence: *execute_cleaning_sequence

      # ===== SECONDA SCHEDULAZIONE SERA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule2_evening' }}"
          - condition: template
            value_template: "{{ schedule2_on and schedule2_evening_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {% set day_map = {
                'monday': 'lunedì', 'tuesday': 'martedì', 'wednesday': 'mercoledì',
                'thursday': 'giovedì', 'friday': 'venerdì', 'saturday': 'sabato', 'sunday': 'domenica'
              } %}
              {{ day_map[current_weekday] in schedule2_evening_weekdays }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ schedule2_evening_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule2_evening_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "SECONDA SCHEDULAZIONE SERA (Recupero)"
                      slot_preset: !input schedule2_evening_preset
                      slot_rooms: !input schedule2_evening_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule2_evening_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "SECONDA SCHEDULAZIONE SERA (Modalità Leggera)"
                      slot_preset: !input schedule2_evening_fallback_preset
                      slot_rooms: !input schedule2_evening_fallback_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence
              
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "SECONDA SCHEDULAZIONE SERA"
                      slot_preset: !input schedule2_evening_preset
                      slot_rooms: !input schedule2_evening_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence

      # ===== TERZA E QUARTA SCHEDULAZIONE (STESSA LOGICA) =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule3_morning' }}"
          - condition: template
            value_template: "{{ schedule3_on and schedule3_morning_on }}"
        sequence:
          - variables:
              slot_name: "TERZA SCHEDULAZIONE MATTINA"
              slot_preset: !input schedule3_morning_preset
              slot_rooms: !input schedule3_morning_rooms
              slot_sequential: false
              slot_step2_preset: ""
              slot_step2_rooms: ""
              slot_step3_preset: ""
              slot_step3_rooms: ""
              slot_max_wait: 60
          - sequence: *execute_cleaning_sequence

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule3_evening' }}"
          - condition: template
            value_template: "{{ schedule3_on and schedule3_evening_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ schedule3_evening_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "TERZA SCHEDULAZIONE SERA"
                      slot_preset: !input schedule3_evening_preset
                      slot_rooms: !input schedule3_evening_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule4_morning' }}"
          - condition: template
            value_template: "{{ schedule4_on and schedule4_morning_on }}"
        sequence:
          - variables:
              slot_name: "QUARTA SCHEDULAZIONE MATTINA"
              slot_preset: !input schedule4_morning_preset
              slot_rooms: !input schedule4_morning_rooms
              slot_sequential: false
              slot_step2_preset: ""
              slot_step2_rooms: ""
              slot_step3_preset: ""
              slot_step3_rooms: ""
              slot_max_wait: 60
          - sequence: *execute_cleaning_sequence

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule4_evening' }}"
          - condition: template
            value_template: "{{ schedule4_on and schedule4_evening_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ schedule4_evening_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "QUARTA SCHEDULAZIONE SERA"
                      slot_preset: !input schedule4_evening_preset
                      slot_rooms: !input schedule4_evening_rooms
                      slot_sequential: false
                      slot_step2_preset: ""
                      slot_step2_rooms: ""
                      slot_step3_preset: ""
                      slot_step3_rooms: ""
                      slot_max_wait: 60
                  - sequence: *execute_cleaning_sequence

mode: single
max_exceeded: silent
